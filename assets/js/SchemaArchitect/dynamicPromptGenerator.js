/**
 * @file dynamicPromptGenerator.js
 * @description وحدة مستقلة لتوليد برومبت ذكاء اصطناعي ديناميكي ومخصص.
 * @version 4.0.0 - The Surgical Prompt
 * @author Ai8V | Mind & Machine
 *
 * هذه الوحدة تقوم بتطبيق استراتيجية "الهندسة الديناميكية للبرومبت" المحصّنة.
 * تأخذ نوع السكيما الذي يختاره المستخدم كمدخل، وتنتج برومبتًا كاملاً
 * ومخصصًا يوجه نموذج الذكاء الاصطناعي لتحسين بنية سكيما موجودة مسبقًا.
 */

const DynamicPromptGenerator = (function () {

    // ===================================================================
    //  1. القالب الأساسي للبرومبت (The Master Prompt Template v4.0)
    // ===================================================================

    /**
     * القالب الأساسي للبرومبت المحصّن والنهائي.
     * هذا البرومبت يفرض على الذكاء الاصطناعي العمل كجرّاح دلالي دقيق.
     * @type {string}
     */
    const PROMPT_TEMPLATE = `أنت مُدقِّق ومُهيكِل بيانات منظمة (Schema Auditor & Refactor Expert) خبير، ومهمتك هي تحسين وهيكلة كود JSON-LD موجود مسبقًا وليس إنشاء واحد من الصفر.

سأزودك بثلاثة مدخلات:
1.  \`page.html\`: ملف المحتوى الأصلي.
2.  \`base_schema.jsonld\`: هذا هو **الهيكل الأساسي والموثوق** الذي تم توليده من أداتنا.
3.  \`PRIMARY_ENTITY_TYPE\`: متغير نصي يحدد الكيان الرئيسي الذي تم اختياره، وقيمته هي **\`{{SCHEMA_TYPE}}\`**.

**مهمتك المطلوبة هي اتباع هذه الخوارزمية الصارمة، خطوة بخطوة، دون انحراف:**

**المرحلة الأولى: التحسين وإعادة الهيكلة الدلالية**

1.  **قاعدة إثراء HowTo (CRITICAL RULE):**
    *   ابحث داخل \`base_schema.jsonld\` عن أي كيان من نوع **\`HowTo\`**.
    *   إذا وجدته، قم بالمرور على كل كائن \`HowToStep\` داخل مصفوفة \`step\`.
    *   لكل خطوة، اقرأ محتوى خاصية **\`text\`** الخاصة بها.
    *   بناءً على هذا النص، قم **بإنشاء وتوليد خاصية جديدة اسمها \`name\`** تحتوي على عنوان موجز جدًا (3-5 كلمات) يلخص تلك الخطوة. **يجب أن تكون هذه الخاصية موجودة في كل \`HowToStep\` في المخرج النهائي.**

2.  **قاعدة حذف الصور الجراحية (CRITICAL RULE):**
    *   انظر إلى جميع الكيانات الثانوية الموجودة داخل خاصية \`hasPart\` في ملف \`base_schema.jsonld\`.
    *   **فقط** إذا كان الكيان الثانوي من نوع **\`HowTo\`** أو **\`BreadcrumbList\`**، قم **بحذف خاصية \`image\`** منه.
    *   **لا تلمس إطلاقًا** خاصية \`image\` في أي كيان آخر، خاصة الكيانات من نوع **\`Recipe\`**.

3.  **قاعدة الفصل الذكي (Smart Detachment Rule):**
    *   انظر إلى الهيكل المُحسَّن الآن. إذا كان كيان \`FAQPage\` موجودًا داخل \`hasPart\`، قم **بفصله** من هناك وأنشئ له كتلة \`<script>\` مستقلة.

4.  **تنظيف البيانات (إذا وجد):**
    *   اذهب إلى أي حقل \`sku\` أو \`price\` موجود في الكود ونظّف قيمته ليكون الرمز أو الرقم الفعلي فقط.

5.  **التحقق من الصلاحية:**
    *   راجع الكود (أو الأكواد) النهائية وتأكد من صحة جميع الأقواس والفواصل. هذه خطوة إلزامية.

**المرحلة الثانية: بناء المخرج النهائي**
1.  خذ ملف \`page.html\` الأصلي.
2.  أدرج جميع كتل \`<script>\` الناتجة داخل وسم \`<head>\`.

**المخرج النهائي المطلوب:**
محتوى ملف HTML الكامل مع السكيما المحسّنة، والصالحة دلاليًا.`;


    // ===================================================================
    //  2. الوظيفة العامة (Public Function) - لا تحتاج لتغيير
    // ===================================================================

    /**
     * تقوم بتوليد البرومبت النهائي بناءً على نوع السكيما المختار.
     * @param {string} selectedSchemaType - نوع السكيما الذي اختاره المستخدم (مثل "Product", "Recipe").
     * @returns {string|null} - سلسلة نصية تحتوي على البرومبت المخصص، أو null إذا كان المدخل غير صالح.
     */
    function generatePrompt(selectedSchemaType) {
        if (!selectedSchemaType || typeof selectedSchemaType !== 'string') {
            console.error("خطأ: يجب توفير نوع سكيما صالح.");
            return null;
        }

        const placeholderRegex = /{{SCHEMA_TYPE}}/g;
        
        const finalPrompt = PROMPT_TEMPLATE.replace(placeholderRegex, selectedSchemaType);

        return finalPrompt;
    }

    // إرجاع الواجهة البرمجية العامة للوحدة
    return {
        generate: generatePrompt
    };

})();
