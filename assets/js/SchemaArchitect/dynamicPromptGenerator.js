/**
 * @file dynamicPromptGenerator.js
 * @description وحدة مستقلة لتوليد برومبت ذكاء اصطناعي ديناميكي ومخصص.
 * @version 4.0.0 - The Semantic Surgeon
 * @author Ai8V | Mind & Machine
 *
 * هذه الوحدة تطبق استراتيجية "الجراحة الدلالية".
 * توجه النموذج اللغوي لتفكيك بنية السكيما الأولية، وإثرائها بذكاء لمعالجة
 * أي نقص في البيانات المطلوبة، ثم إعادة بنائها باستخدام بنية @graph،
 * وهي أفضل ممارسة لتعريف كيانات متعددة ومستقلة على صفحة واحدة.
 */

const DynamicPromptGenerator = (function () {

    // ===================================================================
    //  1. القالب الأساسي للبرومبت (The Master Prompt Template v4.0)
    // ===================================================================

    /**
     * القالب الأساسي للبرومبت المحصّن والنهائي.
     * هذا البرومبت يفرض على الذكاء الاصطناعي العمل كجرّاح دلالي دقيق.
     * @type {string}
     */
    const PROMPT_TEMPLATE = `أنت مهندس وجرّاح بيانات دلالية (Semantic Surgeon & Architect)، ومهمتك هي تنفيذ عملية دقيقة لتحويل كود JSON-LD أولي إلى هيكل نهائي قوي ومؤهل بالكامل للنتائج المنسّقة.

سأزودك بثلاثة مدخلات:
1.  \`page.html\`: ملف المحتوى الأصلي.
2.  \`base_schema.jsonld\`: الهيكل الأساسي الخام الذي تم توليده.
3.  \`PRIMARY_ENTITY_TYPE\`: متغير نصي يحدد الكيان الرئيسي الذي تم اختياره، وقيمته هي **\`{{SCHEMA_TYPE}}\`**.

**مهمتك المطلوبة هي اتباع هذه الخوارزمية الجراحية الصارمة، خطوة بخطوة، دون انحراف:**

**المرحلة الأولى: التفكيك والاستيعاب**
1.  **قاعدة الاستيعاب الكامل:** انظر إلى ملف \`base_schema.jsonld\`. استخرج الكيان الرئيسي وجميع الكيانات الثانوية الموجودة داخل خاصية \`hasPart\`. لديك الآن قائمة بجميع الكيانات الخام.

**المرحلة الثانية: الإثراء والتقوية الدلالية (الجراحة)**
1.  **إجراء تقوية كيان "HowTo" (إن وجد):**
    *   ابحث في قائمة الكيانات الخام عن كيان من نوع \`HowTo\`.
    *   إذا وجدته، قم بالمرور على كل خطوة (\`HowToStep\`) داخل مصفوفة \`step\`.
    *   لكل خطوة، قم بقراءة محتوى خاصية \`text\` الخاصة بها.
    *   **بذكاء**، قم بتوليد عنوان موجز ومعبر (لا يتجاوز 10 كلمات) يلخص محتوى النص، وأضفه كخاصية جديدة **\`"name"\`** لهذه الخطوة. **هذه العملية إلزامية لجعل الكيان مؤهلاً.**

**المرحلة الثالثة: إعادة البناء المعماري باستخدام @graph**
1.  **قاعدة البناء:** أنشئ كائن JSON-LD جديدًا. أضف الخاصية **\`"@graph"\`** إليه، واجعل قيمتها مصفوفة فارغة \`[]\`.
2.  **قاعدة التعبئة:** لكل كيان (بعد تقويته في المرحلة الثانية)، ضعه ككائن مستقل ومنفصل داخل مصفوفة \`@graph\`.
3.  **قاعدة الربط بالصفحة:** تأكد من أن **كل كائن** داخل مصفوفة \`@graph\` (باستثناء \`BreadcrumbList\`) يحتوي على خاصية \`mainEntityOfPage\` التي تشير إلى رابط الصفحة.

**المرحلة الرابعة: التنظيف النهائي**
1.  **قاعدة حذف الصور غير الضرورية (CRITICAL RULE):**
    *   انظر إلى جميع الكيانات داخل مصفوفة \`@graph\` الآن.
    *   **فقط** إذا كان الكيان من نوع **\`HowTo\`** أو **\`BreadcrumbList\`**، قم **بحذف خاصية \`image\`** منه بالكامل.
    *   **لا تلمس إطلاقًا** خاصية \`image\` في أي كيان آخر.
2.  **قاعدة تنظيف البيانات:**
    *   اذهب إلى أي حقل \`sku\` أو \`price\` موجود ونظّف قيمته ليكون الرمز أو الرقم الفعلي فقط.
3.  **التحقق الإلزامي من الصلاحية:**
    *   راجع كود \`@graph\` النهائي وتأكد من صحة جميع الأقواس والفواصل.

**المرحلة الخامسة: بناء المخرج النهائي**
1.  خذ ملف \`page.html\` الأصلي.
2.  أدرج كتلة **واحدة فقط** من نوع \`<script type="application/ld+json">\` تحتوي على بنية \`@graph\` الكاملة التي أنشأتها داخل وسم \`<head>\`.

**المخرج النهائي المطلوب:**
محتوى ملف HTML الكامل مع السكيما المحسّنة والمعاد هيكلتها، والمؤهلة بالكامل للنتائج المنسّقة.`;


    // ===================================================================
    //  2. الوظيفة العامة (Public Function) - لا تحتاج لتغيير
    // ===================================================================

    /**
     * تقوم بتوليد البرومبت النهائي بناءً على نوع السكيما المختار.
     * @param {string} selectedSchemaType - نوع السكيما الذي اختاره المستخدم (مثل "Product", "Recipe").
     * @returns {string|null} - سلسلة نصية تحتوي على البرومبت المخصص، أو null إذا كان المدخل غير صالح.
     */
    function generatePrompt(selectedSchemaType) {
        if (!selectedSchemaType || typeof selectedSchemaType !== 'string') {
            console.error("خطأ: يجب توفير نوع سكيما صالح.");
            return null;
        }

        const placeholderRegex = /{{SCHEMA_TYPE}}/g;
        
        const finalPrompt = PROMPT_TEMPLATE.replace(placeholderRegex, selectedSchemaType);

        return finalPrompt;
    }

    // إرجاع الواجهة البرمجية العامة للوحدة
    return {
        generate: generatePrompt
    };

})();
