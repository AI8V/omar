/**
 * @file dynamicPromptGenerator.js
 * @description وحدة مستقلة لتوليد برومبت ذكاء اصطناعي ديناميكي ومخصص.
 * @version 3.0.0 - The @graph Architect
 * @author Ai8V | Mind & Machine
 *
 * هذه الوحدة تطبق استراتيجية "الهندسة المعمارية الدلالية".
 * توجه النموذج اللغوي لتفكيك بنية السكيما الأولية وإعادة بنائها بالكامل
 * باستخدام بنية @graph، وهي أفضل ممارسة لتعريف كيانات متعددة ومستقلة على صفحة واحدة.
 */

const DynamicPromptGenerator = (function () {

    // ===================================================================
    //  1. القالب الأساسي للبرومبت (The Master Prompt Template v3.0)
    // ===================================================================

    /**
     * القالب الأساسي للبرومبت المحصّن والنهائي.
     * هذا البرومبت يفرض على الذكاء الاصطناعي العمل كمهندس بيانات دلالية.
     * @type {string}
     */
    const PROMPT_TEMPLATE = `أنت مهندس بيانات دلالية وخبير في إعادة هيكلة الشيفرة (Semantic Architect & Refactoring Expert)، ومهمتك ليست مجرد تحسين كود، بل هي تفكيك الهيكل القديم وإعادة بنائه بالكامل باستخدام بنية @graph لتحقيق أقصى درجات الوضوح الدلالي.

سأزودك بثلاثة مدخلات:
1.  \`page.html\`: ملف المحتوى الأصلي.
2.  \`base_schema.jsonld\`: الهيكل الأساسي الذي تم توليده.
3.  \`PRIMARY_ENTITY_TYPE\`: متغير نصي يحدد الكيان الرئيسي الذي تم اختياره، وقيمته هي **\`{{SCHEMA_TYPE}}\`**.

**مهمتك المطلوبة هي اتباع هذه الخوارزمية المعمارية الصارمة، خطوة بخطوة، دون انحراف:**

**المرحلة الأولى: التفكيك وإعادة البناء المعماري باستخدام @graph**
1.  **قاعدة الاستيعاب الكامل:** انظر إلى ملف \`base_schema.jsonld\`. استخرج الكيان الرئيسي (مثل \`Product\`) وجميع الكيانات الثانوية الموجودة داخل خاصية \`hasPart\` (مثل \`FAQPage\`, \`HowTo\`). لديك الآن قائمة بجميع الكيانات.
2.  **قاعدة البناء باستخدام @graph:** أنشئ كائن JSON-LD جديدًا وفارغًا. أضف الخاصية **\`"@graph"\`** إليه، واجعل قيمتها مصفوفة فارغة \`[]\`.
3.  **قاعدة التعبئة الفردية:** لكل كيان استخرجته في الخطوة الأولى، قم بوضعه ككائن مستقل ومنفصل داخل مصفوفة \`@graph\`.
4.  **قاعدة الربط بالصفحة:** بشكل إلزامي، تأكد من أن **كل كائن** داخل مصفوفة \`@graph\` (باستثناء \`BreadcrumbList\`) يحتوي على خاصية \`mainEntityOfPage\` التي تشير إلى رابط الصفحة.

**المرحلة الثانية: التنظيف الجراحي والتحسين الدقيق**
1.  **قاعدة حذف الصور غير الضرورية (CRITICAL RULE):**
    *   انظر إلى جميع الكيانات داخل مصفوفة \`@graph\` الآن.
    *   **فقط** إذا كان الكيان من نوع **\`HowTo\`** أو **\`BreadcrumbList\`**، قم **بحذف خاصية \`image\`** منه بالكامل.
    *   **لا تلمس إطلاقًا** خاصية \`image\` في أي كيان آخر، خاصة الكيانات من نوع **\`Recipe\`** أو **\`Product\`**.
2.  **قاعدة تنظيف البيانات:**
    *   اذهب إلى أي حقل \`sku\` أو \`price\` موجود في الكود ونظّف قيمته ليكون الرمز أو الرقم الفعلي فقط.
3.  **التحقق الإلزامي من الصلاحية:**
    *   راجع كود \`@graph\` النهائي وتأكد من صحة جميع الأقواس والفواصل. هذه خطوة إلزامية.

**المرحلة الثالثة: بناء المخرج النهائي**
1.  خذ ملف \`page.html\` الأصلي.
2.  أدرج كتلة **واحدة فقط** من نوع \`<script type="application/ld+json">\` تحتوي على بنية \`@graph\` الكاملة التي أنشأتها داخل وسم \`<head>\`.

**المخرج النهائي المطلوب:**
محتوى ملف HTML الكامل مع السكيما المحسّنة والمعاد هيكلتها، والصالحة دلاليًا.`;


    // ===================================================================
    //  2. الوظيفة العامة (Public Function) - لا تحتاج لتغيير
    // ===================================================================

    /**
     * تقوم بتوليد البرومبت النهائي بناءً على نوع السكيما المختار.
     * @param {string} selectedSchemaType - نوع السكيما الذي اختاره المستخدم (مثل "Product", "Recipe").
     * @returns {string|null} - سلسلة نصية تحتوي على البرومبت المخصص، أو null إذا كان المدخل غير صالح.
     */
    function generatePrompt(selectedSchemaType) {
        if (!selectedSchemaType || typeof selectedSchemaType !== 'string') {
            console.error("خطأ: يجب توفير نوع سكيما صالح.");
            return null;
        }

        const placeholderRegex = /{{SCHEMA_TYPE}}/g;
        
        const finalPrompt = PROMPT_TEMPLATE.replace(placeholderRegex, selectedSchemaType);

        return finalPrompt;
    }

    // إرجاع الواجهة البرمجية العامة للوحدة
    return {
        generate: generatePrompt
    };

})();
